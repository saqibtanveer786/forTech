// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?   @unique
  emailVerified DateTime? @map("email_verified")
  image     String?

  role      Role     @default(USER)
  posts     Post[]
  messages  PeopleMessages[]
  comments  Comment[]
  votes     Vote[]

  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
}

model Post {
  id      String       @id @default(cuid())
  title   String
  content Json
  briefdescription String?
  image String
  published Boolean @default(false)
  authorId String?
  author User? @relation(fields: [authorId], references: [id])
  comments Comment[]
  votes Vote[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PeopleMessages {
  id String @id @default(cuid())
  name String
  email String?
  message String
  userId String?
  userDetails User? @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Comment {
  id       String @id @default(cuid())
  message String
  postId   String
  userId   String
  post     Post @relation(fields: [postId], references: [id])
  user     User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model Vote {
  userId String 
  postId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references:[id])

  type VoteType

  @@id([userId, postId])
}

enum Role {
  USER
  AUTHER
  ADMIN
}

enum VoteType {
  UP
  DOWN
}